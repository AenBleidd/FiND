Author: Sebastian Ramacher <s.ramacher@gmx.at>, Andreas Tille <tille@debian.org>
Date: Mon, 28 Nov 2011 13:52:29 +0100
Forewarded-Upstream: Oleg Trott <trott@scripps.edu>, Ruth Huey <rhuey@scripps.edu>
Closes: #642697

--- autodock-vina-1.1.2.orig/build/makefile_common
+++ autodock-vina-1.1.2/build/makefile_common
@@ -10,7 +10,7 @@
 
 LDFLAGS = -L$(BASE)/lib -L.
 
-LIBS = -l boost_system${BOOST_LIB_VERSION} -l boost_thread${BOOST_LIB_VERSION} -l boost_program_options${BOOST_LIB_VERSION}#-l pthread
+LIBS = -l boost_system${BOOST_LIB_VERSION} -l boost_thread${BOOST_LIB_VERSION} -l boost_program_options${BOOST_LIB_VERSION} -lboost_filesystem${BOOST_LIB_VERSION} #-l pthread
 
 .SUFFIXES: .cpp .o
 
--- autodock-vina-1.1.2.orig/src/main/main.cpp
+++ autodock-vina-1.1.2/src/main/main.cpp
@@ -47,7 +47,7 @@
 using boost::filesystem::path;
 
 path make_path(const std::string& str) {
-	return path(str, boost::filesystem::native);
+	return path(str);
 }
 
 void doing(int verbosity, const std::string& str, tee& log) {
@@ -661,7 +661,7 @@
 					cpu, seed, verbosity, max_modes_sz, energy_range, log);
 	}
 	catch(file_error& e) {
-		std::cerr << "\n\nError: could not open \"" << e.name.native_file_string() << "\" for " << (e.in ? "reading" : "writing") << ".\n";
+		std::cerr << "\n\nError: could not open \"" << e.name.string() << "\" for " << (e.in ? "reading" : "writing") << ".\n";
 		return 1;
 	}
 	catch(boost::filesystem::filesystem_error& e) {
@@ -673,7 +673,7 @@
 		return 1;
 	}
 	catch(parse_error& e) {
-		std::cerr << "\n\nParse error on line " << e.line << " in file \"" << e.file.native_file_string() << "\": " << e.reason << '\n';
+		std::cerr << "\n\nParse error on line " << e.line << " in file \"" << e.file.string() << "\": " << e.reason << '\n';
 		return 1;
 	}
 	catch(std::bad_alloc&) {
--- autodock-vina-1.1.2.orig/src/split/split.cpp
+++ autodock-vina-1.1.2/src/split/split.cpp
@@ -38,7 +38,7 @@
 using boost::filesystem::path;
 
 path make_path(const std::string& str) {
-	return path(str, boost::filesystem::native);
+	return path(str);
 }
 
 std::string default_prefix(const std::string& input_name, const std::string& add) {
@@ -208,7 +208,7 @@
 		write_multimodel_pdbqt(tmp, ligand_prefix, flex_prefix);
 	}
 	catch(file_error& e) {
-		std::cerr << "\n\nError: could not open \"" << e.name.native_file_string() << "\" for " << (e.in ? "reading" : "writing") << ".\n";
+		std::cerr << "\n\nError: could not open \"" << e.name.string() << "\" for " << (e.in ? "reading" : "writing") << ".\n";
 		return 1;
 	}
 	catch(boost::filesystem::filesystem_error& e) {
@@ -220,7 +220,7 @@
 		return 1;
 	}
 	catch(parse_error& e) {
-		std::cerr << "\n\nParse error on line " << e.line << " in file \"" << e.file.native_file_string() << "\": " << e.reason << '\n';
+		std::cerr << "\n\nParse error on line " << e.line << " in file \"" << e.file.string() << "\": " << e.reason << '\n';
 		return 1;
 	}
 	catch(std::bad_alloc&) {
